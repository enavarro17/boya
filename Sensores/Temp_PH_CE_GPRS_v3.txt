
#include <OneWire.h>
#include <SoftwareSerial.h>
#include <String.h> 

#define StartConvert 0
#define ReadTemperature 1

const byte numReadings = 20;     //the number of sample times
byte ECsensorPin = A1;  //EC Meter analog output,pin on analog 1
byte DS18B20_Pin = 2; //DS18B20 signal, pin on digital 2
unsigned int AnalogSampleInterval=25,printInterval=700,tempSampleInterval=850;  //analog sample interval;serial print interval;temperature sample interval
unsigned int readings[numReadings];      // the readings from the analog input
byte index = 0;                  // the index of the current reading
unsigned long AnalogValueTotal = 0;                  // the running total
unsigned int AnalogAverage = 0;                // the average
unsigned long AnalogSampleTime,printTime,tempSampleTime;
float temperature=0.00;
float ECcurrent=0.00;
int sensor_ph = A0;
int medidaph;
double voltageph;
float ph;
float TempCoefficient;
float CoefficientVolatge;
float averageVoltage;

//Temperature chip i/o
OneWire ds(DS18B20_Pin);  // on digital pin 2
SoftwareSerial mySerial(7, 8);

void setup() {
 // initialize serial communication with computer:
  mySerial.begin(19200);
  Serial.begin(19200);
  // initialize all the readings to 0:
  for (byte thisReading = 0; thisReading < numReadings; thisReading++)
    readings[thisReading] = 0;
  TempProcess(StartConvert);   //let the DS18B20 start the convert
  AnalogSampleTime=millis();
  printTime=millis();
  tempSampleTime=millis();
}

void loop() {

   digitalWrite(9, LOW); 
   delay(2);          
   lago_ranco(); 
  
   
  if (mySerial.available())
  Serial.write(mySerial.read());

   
}




void lago_ranco()

{

    
      delay(20000);
      mySerial.println("AT");
      delay(3000);
    //CODIGO PIN
      mySerial.println("AT+CPIN?"); 
      delay(3000);
    //REGISTRO EN LA RED
      mySerial.println("AT+CREG?");
      delay(3000);
    //NOMBRE CONEXION
      mySerial.println("AT+CGATT?");
      delay(3000);
    //CIERRE ENLACE
    mySerial.println("AT+CIPSHUT");
      delay(3000);
    Serial.println("ESTADO DE LA CONEXION -RESPUESTA- ");
      mySerial.println("AT+CIPSTATUS");
      delay(3000);
      mySerial.println("AT+CIPMUX=0");
      delay(4000);
     
      ShowSerialData();
       
     Serial.println("APN:");
      mySerial.println("AT+CSTT=\"bam.entelpcs.cl\",\"entelpcs\",\"entelpcs\"");
      delay(3000);
     
     ShowSerialData();
     Serial.println("ESTADO DE CONEXION GPRS: ");
     mySerial.println("AT+CIICR");// INICIO CONEXION GPRS
     delay(6000);
     
     ShowSerialData();
     Serial.println("DIRECCION IP LOCAL: ");
     mySerial.println("AT+CIFSR");// ASIGNACION IP 
     delay(4000);
     
     ShowSerialData();
     
     mySerial.println("AT+CIPSPRT=0");
     delay(6000);
     
      ShowSerialData();
      Serial.println("CONEXION TCP: ");
      mySerial.println("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\""); //INICIO CONEXION
      delay(6000);
     
      ShowSerialData();
     Serial.println("ENVIO DE DATOS A TRAVES DE LA CONEXION TCP: ");
      mySerial.println("AT+CIPSEND"); //ENVIA DATOS AL SERVIDOR REMOTO
      delay(6000);
      ShowSerialData();  

//INICIO SENSORES
    
   medidaph = analogRead(sensor_ph);
   voltageph = 5 / 1024.0 * medidaph;
   ph = 7 + ((2.5 - voltageph) / 0.18);
   
   
  if(millis()-AnalogSampleTime>=AnalogSampleInterval)
  {
    AnalogSampleTime=millis();
     // subtract the last reading:
    AnalogValueTotal = AnalogValueTotal - readings[index];
    // read from the sensor:
    readings[index] = analogRead(ECsensorPin);
    // add the reading to the total:
    AnalogValueTotal = AnalogValueTotal + readings[index];
    // advance to the next position in the array:
    index = index + 1;
    // if we're at the end of the array...
    if (index >= numReadings)
    // ...wrap around to the beginning:
    index = 0;
    // calculate the average:
    AnalogAverage = AnalogValueTotal / numReadings;
  }
  /*
   Every once in a while,MCU read the temperature from the DS18B20 and then let the DS18B20 start the convert.
   Attention:The interval between start the convert and read the temperature should be greater than 750 millisecond,or the temperature is not accurate!
  */
   if(millis()-tempSampleTime>=tempSampleInterval)
  {
    tempSampleTime=millis();
    temperature = TempProcess(ReadTemperature);  // read the current temperature from the  DS18B20
    TempProcess(StartConvert);                   //after the reading,start the convert for next reading
  }
   /*
   Every once in a while,print the information on the serial monitor.
  */
  if(millis()-printTime>=printInterval)
  {
    printTime=millis();
    averageVoltage=AnalogAverage*(float)5000/1024;
    //Serial.print("Analog value:");
    //Serial.print(AnalogAverage);   //analog average,from 0 to 1023
    //Serial.print("    Voltage:");
    //Serial.print(averageVoltage);  //millivolt average,from 0mv to 4995mV
    //Serial.print("mV    ");
    //Serial.print("Temp:");
    //Serial.print(temperature);    //current temperature
    //Serial.print("^C     EC:");

    TempCoefficient=1.0+0.0185*(temperature-25.0);    //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.0185*(fTP-25.0));
    CoefficientVolatge=averageVoltage/TempCoefficient;
    if(CoefficientVolatge<150)Serial.println("No solution!");   //25^C 1413us/cm<-->about 216mv  if the voltage(compensate)<150,that is <1ms/cm,out of the range
    else if(CoefficientVolatge>3300)Serial.println("Fuera de rango");  //>20ms/cm,out of the range
    else
    {
      if(CoefficientVolatge<=448)ECcurrent=6.84*CoefficientVolatge-64.32;   //1ms/cm<EC<=3ms/cm
      else if(CoefficientVolatge<=1457)ECcurrent=6.98*CoefficientVolatge-127;  //3ms/cm<EC<=10ms/cm
      else ECcurrent=5.3*CoefficientVolatge+2278;                           //10ms/cm<EC<20ms/cm
      ECcurrent/=1000;    //convert us/cm to ms/cm
      //Serial.print(ECcurrent,2);  //two decimal
      //Serial.print("ms/cm      ");
    }
    //Serial.print("PH: ");
    //Serial.println(ph, 2);
  }




    String str="GET http://api.thingspeak.com/update?api_key=NIRMKFFOOB8LP38E&field1="+String(temperature)+"&field2="+String(ECcurrent) +"&field3="+String(ph);
      //  String str1="GET http://api.thingspeak.com/update?api_key=NIRMKFFOOB8LP38E&field2="+po; 

        
 
        
      mySerial.println(str);
      delay(4000);
      ShowSerialData();
    
      mySerial.println((char)26); //RESPUESTA SERVIDOR THINGSPEAK
      delay(5000);                //TIEMPO PARA QUE RESPONDA LA RED (CALIDAD SEÑAL)
      mySerial.println();
     
      ShowSerialData();
     
      mySerial.println("AT+CIPSHUT"); //CERRAR CONEXION
      delay(100);
      ShowSerialData();
    
      delay(30000);
    
  
}
/*
ch=0,let the DS18B20 start the convert;ch=1,MCU read the current temperature from the DS18B20.
*/
float TempProcess(bool ch)
{
  //returns the temperature from one DS18B20 in DEG Celsius
  static byte data[12];
  static byte addr[8];
  static float TemperatureSum;
  if(!ch){
          if ( !ds.search(addr)) {
             // Serial.println("no more sensors on chain, reset search!");
              ds.reset_search();
              return 0;
          }
          if ( OneWire::crc8( addr, 7) != addr[7]) {
              //Serial.println("CRC is not valid!");
              return 0;
          }
          if ( addr[0] != 0x10 && addr[0] != 0x28) {
             // Serial.print("Device is not recognized!");
              return 0;
          }
          ds.reset();
          ds.select(addr);
          ds.write(0x44,1); // start conversion, with parasite power on at the end
  }
  else{
          byte present = ds.reset();
          ds.select(addr);
          ds.write(0xBE); // Read Scratchpad
          for (int i = 0; i < 9; i++) { // we need 9 bytes
            data[i] = ds.read();
          }
          ds.reset_search();
          byte MSB = data[1];
          byte LSB = data[0];
          float tempRead = ((MSB << 8) | LSB); //using two's compliment
          TemperatureSum = tempRead / 16;
    }
          return TemperatureSum;
}


void ShowSerialData()
{
  while(mySerial.available()!=0)
    Serial.write(mySerial.read());
    delay(0);
}

void datos()
{
    Serial.print("Temp:");
    Serial.print(temperature);    //current temperature
    Serial.print("^C     EC:");
    Serial.print(ECcurrent,2);  //two decimal
    Serial.print("ms/cm      ");
    Serial.print("PH: ");
    Serial.println(ph, 2);
}